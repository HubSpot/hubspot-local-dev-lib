{
  "lib": {
    "trackUsage": {
      "invalidEvent": "Usage tracking event {{ eventName }} is not a valid event type.",
      "sendingEventAuthenticated": "Sending usage event to authenticated endpoint",
      "retryingEventUnauthenticated": "Failed to send the usage event as authenticated. Trying again as unauthenticated.",
      "sendingEventUnauthenticated": "Sending usage event to unauthenticated endpoint"
    },
    "archive": {
      "extractZip": {
        "init": "Extracting project source...",
        "success": "Completed project source extraction.",
        "errors": {
          "write": "An error occurred writing temp project source.",
          "extract": "An error occurred extracting project source."
        }
      },
      "copySourceToDest": {
        "init": "Copying project source...",
        "sourceEmpty": "Project source is empty",
        "success": "Completed copying project source.",
        "error": "An error occurred copying project source to {{ dest }}."
      },
      "cleanupTempDir": {
        "error": "Failed to clean up temp dir: {{ tmpDir }}"
      }
    },
    "gitignore": {
      "errors": {
        "configIgnore": "Unable to determine if config file is properly ignored by git."
      }
    },
    "github": {
      "fetchFileFromRepository": {
        "fetching": "Fetching {{ path }}...",
        "errors": {
          "fetchFail": "An error occurred fetching JSON file."
        }
      },
      "fetchReleaseData": {
        "errors": {
          "fetchFail": "Failed fetching release data for {{ tag }} project."
        }
      },
      "downloadGithubRepoZip": {
        "fetching": "Fetching repository with name {{ repoPath }}...",
        "fetchingName": "Fetching {{ name }}...",
        "completed": "Completed project fetch.",
        "errors": {
          "fetchFail": "An error occurred fetching the project source."
        }
      },
      "cloneGithubRepo": {
        "success": "Your new {{ type }} has been created in {{ dest }}"
      },
      "downloadGithubRepoContents": {
        "downloading": "Downloading content piece: {{ contentPiecePath }} from {{ downloadUrl }} to {{ downloadPath }}",
        "errors": {
          "fetchFail": "Failed to fetch contents: {{ errorMessage }}"
        }
      },
      "listGitHubRepoContents": {
        "errors": {
          "fetchFail": "Failed to fetch contents: {{ errorMessage }}"
        }
      }
    },
    "hubdb": {
      "errors": {
        "invalidJsonPath": "The HubDB table file must be a '.json' file",
        "invalidJsonFile": "The '{{{ src }}' path is not a path to a file"
      }
    },
    "personalAccessKey": {
      "errors": {
        "accountNotFound": "Account with id {{ accountId }} does not exist.",
        "invalidPersonalAccessKey": "Error while retrieving new access token: {{ errorMessage }}",
        "invalidAuthType": "Error fetching access token: account {{ accountId }} uses an auth type other than personalaccesskey"
      }
    },
    "cms": {
      "modules": {
        "createModule": {
          "creatingModule": "Creating module at {{ path }}",
          "creatingPath": "Creating {{ path }}",
          "errors": {
            "pathExists": "The {{ path }} path already exists",
            "fileUpdateFailure": "There was a problem updating the modules files at {{ path }}: {{ errorMessage }}"
          }
        },
        "retrieveDefaultModule": {
          "errors": {
            "pathExists": "Folder already exists at \"{{ path }}\""
          }
        }
      },
      "functions": {
        "updateExistingConfig": {
          "unableToReadFile": "The file {{ configFilePath }} could not be read",
          "invalidJSON": "The file {{ configFilePath }} is not valid JSON",
          "couldNotUpdateFile": "The file {{ configFilePath }} could not be updated",
          "errors": {
            "configIsNotObjectError": "The existing {{ configFilePath }} is not an object",
            "endpointAreadyExistsError": "The endpoint {{ endpointPath }} already exists in {{ configFilePath }}"
          }
        },
        "createFunction": {
          "destPathAlreadyExists": "The {{ path }} path already exists",
          "createdDest": "Created {{ path }}",
          "failedToCreateFile": "The file {{ configFilePath }} could not be created",
          "createdFunctionFile": "Created {{ path }}",
          "createdConfigFile": "Created {{ path }}",
          "success": "A function for the endpoint '/_hcms/api/{{ endpointPath }}' has been created. Upload {{ folderName }} to try it out",
          "errors": {
            "nestedConfigError": "Cannot create a functions directory inside '{{ ancestorConfigPath }}'",
            "jsFileConflictError": "The JavaScript file at '{{ functionFilePath }}'' already exists"
          }
        }
      },
      "handleFieldsJs": {
        "convertFieldsJs": {
          "creating": "Creating child process with pid {{ pid }}",
          "terminating": "Child process with pid {{ pid }} has been terminated",
          "errors": {
            "errorConverting": "There was an error converting '{{ filePath }}'"
          }
        },
        "saveOutput": {
          "errors": {
            "saveFailed": "There was an error saving the json output of {{ path }}"
          }
        },
        "createTmpDirSync": {
          "errors": {
            "writeFailed": "An error occurred writing temporary project source."
          }
        },
        "cleanupTmpDirSync": {
          "errors": {
            "deleteFailed": "There was an error deleting the temporary project source"
          }
        }
      },
      "uploadFolder": {
        "uploadFolder": {
          "success": "Uploaded file \"{{ file}}\" to \"{{ destPath }}\"",
          "attempt": "Attempting to upload file \"{{ file }}\" to \"{{ destPath }}\"",
          "failed": "Uploading file \"{{ file }}\" to \"{{ destPath }}\" failed so scheduled retry",
          "retry": "Retrying to upload file \"{{ file }}\" to \"{{ destPath }}\"",
          "retryFailed": "Uploading file \"{{ file }}\" to \"{{ destPath }}\" failed"
        }
      },
      "templates": {
        "createTemplate": {
          "creatingFile": "Creating file at {{ path }}",
          "creatingPath": "Making {{ path }} if needed",
          "errors": {
            "pathExists": "The {{ path }} path already exists"
          }
        }
      },
      "processFieldsJs": {
        "converting": "Converting \"{{ src }}\" to \"{{ dest }}\".",
        "converted": "Finished converting \"{{ src }}\" to \"{{ dest }}\".",
        "errors": {
          "invalidMjsFile": ".mjs files are only supported when using Node 13.2.0+",
          "notFunction": "There was an error loading JS file \"{{ path }}\". Expected type \"Function\" but received type \"{{ returned }}\". Make sure that your default export is a function.",
          "notArray": "There was an error loading JS file \"{{ path }}\". Expected type \"Array\" but received type \"{{ returned }}\" . Make sure that your function returns an array"
        }
      },
      "watch": {
        "notifyOfThemePreview": "To preview this theme, visit: {{ previewUrl }}",
        "skipUnsupportedExtension": "Skipping {{ file }} due to unsupported extension",
        "skipIgnoreRule": "Skipping {{ file }} due to an ignore rule",
        "uploadAttempt": "Attempting to upload file \"{{ file }}\" to \"{{ dest }}\"",
        "uploadSuccess": "Uploaded file {{ file }} to {{ dest }}",
        "uploadFailed": "Uploading file {{ file }} to {{ dest }} failed",
        "uploadRetry": "Retrying to upload file \"{{ file }}\" to \"{{ dest }}\"",
        "deleteAttempt": "Attempting to delete file {{ remoteFilePath }}",
        "deleteAttemptWithType": "Attempting to delete {{ type }} {{ remoteFilePath }}",
        "deleteSuccess": "Deleted file {{ remoteFilePath }}",
        "deleteSuccessWithType": "Deleted {{ type }} {{ remoteFilePath }}",
        "deleteFailed": "Deleting file {{ remoteFilePath }} failed",
        "folderUploadSuccess": "Completed uploading files in {{ src }} to {{ dest }} in {{ accountId }}",
        "ready": "Watcher is ready and watching {{ src }}. Any changes detected will be automatically uploaded and overwrite the current version in the developer file system."
      }
    },
    "oauth": {
      "writeTokenInfo": "Updating Oauth2 token info for portalId: {{ portalId }}",
      "addOauthToAccountConfig": {
        "init": "Updating configuration",
        "success": "Configuration updated"
      }
    },
    "fileManager": {
      "uploadStarted": "Uploading files from \"{{ file }}\" to \"{{ destPath }}\" in the File Manager of account {{ accountId }}",
      "uploadSuccess": "Uploaded file \"{{ file }}\" to \"{{ destPath }}\"",
      "skippedExisting": "Skipped existing {{ filepath }}",
      "fetchingFiles": "Fetching {{ fileCount }} files from remote folder: {{ folderName }}",
      "fetchFolderStarted": "Fetching folder from \"{{ src }}\" to \"{{ path }}\" in the File Manager of account {{ accountId }}",
      "fetchFolderSuccess": "Completed fetch of folder \"{{ src }}\" to \"{{ dest }}\" from the File Manager",
      "fetchFileStarted": "Fetching file from \"{{ src }}\" to \"{{ dest }}\" in the File Manager of account {{ accountId }}",
      "fetchFileSuccess": "Completed fetch of file \"{{ src }}\" to \"{{ dest }}\" from the File Manager",
      "errors": {
        "uploadFailed": "Uploading file \"{{ file }}\" to \"{{ destPath }}\" failed",
        "archivedFile": "\"{{ src }} \" in the File Manager is an archived file. Try fetching again with the \"--include-archived\" flag",
        "hiddenFile": "\"{{ src }}\" in the File Manager is a hidden file."
      }
    },
    "fileMapper": {
      "skippedExisting": "Skipped existing {{ filepath }}",
      "wroteFolder": "Wrote folder {{ filepath }}",
      "completedFetch": "Completed fetch of file \"{{ src }}\"{{ version }} to \"{{ dest }}\" from the Design Manager",
      "folderFetch": "Fetched \"{{ src }}\" from account {{ accountId }} from the Design Manager successfully",
      "completedFolderFetch": "Completed fetch of folder \"{{ src }}\"{{ version }} to \"{{ dest }}\" from the Design Manager",
      "errors": {
        "invalidRequest": "Invalid request for file: {{ src }}",
        "invalidNode": "Invalid FileMapperNode: {{ json }}",
        "invalidFileType": "Invalid file type requested: {{ srcPath }}",
        "assetTimeout": "HubSpot assets are unavailable at the moment. Please wait a few minutes and try again.",
        "failedToFetchFile": "Failed fetch of file \"{{ src }}\" to \"{{ dest }}\" from the Design Manager",
        "failedToFetchFolder": "Failed fetch of folder \"{{ src }}\" to \"{{ dest }}\" from the Design Manager",
        "invalidFetchFolderRequest": "Invalid request for folder: \"{{ src }}\"",
        "incompleteFetch": "Not all files in folder \"{{ src }}\" were successfully fetched.  Re-run the last command to try again"
      }
    },
    "accountTypes": {
      "developmentSandbox": "dev sandbox",
      "standardSandbox": "standard sandbox",
      "developerTest": "test account",
      "appDeveloper": "dev account",
      "standard": "standard"
    }
  },
  "config": {
    "getDefaultConfigFilePath": {
      "error": "Error getting config file path: no config file found"
    },
    "getConfig": "Reading config from {{ path }}",
    "isConfigValid": {
      "missingAccounts": "Invalid config: no accounts found",
      "duplicateAccountIds": "Invalid config: multiple accounts with accountId: {{ accountId }}",
      "duplicateAccountNames": "Invalid config: multiple accounts with name: {{ accountName }}",
      "invalidAccountName": "Invalid config: account name {{ accountName }} contains spaces"
    },
    "getConfigAccountById": {
      "error": "Error getting config account: no account with id {{ accountId }} exists in config"
    },
    "getConfigAccountByName": {
      "error": "Error getting config account: no account with name {{ accountName }} exists in config"
    },
    "getConfigDefaultAccount": {
      "fieldMissingError": "Error getting config default account: no default account field found in config",
      "accountMissingError": "Error getting config default account: default account is set to {{ defaultAccount }} but no account with that id exists in config"
    },
    "addConfigAccount": {
      "invalidAccount": "Error adding config account: account is invalid",
      "duplicateAccount": "Error adding config account: account with id {{ accountId }} already exists in config"
    },
    "updateConfigAccount": {
      "invalidAccount": "Error updating config account: account is invalid",
      "accountNotFound": "Error updating config account: account with id {{ accountId }} not found in config"
    },
    "setConfigAccountAsDefault": {
      "accountNotFound": "Error setting config default account: account with id {{ accountId }} not found in config"
    },
    "renameConfigAccount": {
      "accountNotFound": "Error renaming config account: account with name {{ currentName }} not found in config",
      "duplicateAccount": "Error renaming config account: account with name {{ newName}} already exists in config"
    },
    "removeAccountFromConfig": {
      "accountNotFound": "Error removing config account: account with id {{ accountId }} not found in config"
    },
    "updateHttpTimeout": {
      "invalidTimeout": "Error updating config http timeout: timeout must be greater than {{ minTimeout }}"
    },
    "updateDefaultCmsPublishMode": {
      "invalidCmsPublishMode": "Error updating config default CMS publish mode: CMS publish can only be set to 'draft' or 'publish'"
    },
    "utils": {
      "isConfigAccountValid": {
        "missingAccount": "Invalid config: at least one account in config is missing data",
        "missingAuthType": "Invalid config: account {{ accountId }} has no authType",
        "missingAccountId": "Invalid config: at least one account in config is missing accountId",
        "missingApiKey": "Invalid config: account {{ accountId }} has authType of apikey but is missing the apiKey field",
        "missingAuth": "Invalid config: account {{ accountId }} has authtype of oauth2 but is missing auth data",
        "missingPersonalAccessKey": "Invalid config: account {{ accountId }} has authType of personalAccessKey but is missing the personalAccessKey field"
      },
      "getConfigPathEnvironmentVariables": {
        "invalidEnvironmentVariables": "Error loading config: USE_ENVIRONMENT_HUBSPOT_CONFIG and HUBSPOT_CONFIG_PATH cannot both be set simultaneously"
      },
      "parseConfig": {
        "error": "An error occurred parsing the config file."
      },
      "buildConfigFromEnvironment": {
        "missingAccountId": "Error loading config from environment: HUBSPOT_ACCOUNT_ID not set",
        "invalidAuthType": "Error loading config from environment: auth is invalid. Use HUBSPOT_CLIENT_ID, HUBSPOT_CLIENT_SECRET, and HUBSPOT_REFRESH_TOKEN to authenticate with Oauth2, PERSONAL_ACCESS_KEY to authenticate with Personal Access Key, or API_KEY to authenticate with API Key."
      }
    },
    "defaultAccountOverride": {
      "getDefaultAccountOverrideAccountId": {
        "errorHeader": "Error in {{ hsAccountFile }}",
        "readFileError": "Error reading account override file."
      }
    },
    "migrate": {
      "errors": {
        "writeConfig": "Unable to write global configuration file at {{ configPath }}.",
        "noDeprecatedConfig": "No deprecated configuration file found. Skipping migration to global config."
      }
    }
  },
  "models": {
    "OAuth2Manager": {
      "fetchingAccessToken": "Fetching access token for accountId {{ accountId }} for clientId {{ clientId }}",
      "updatingTokenInfo": "Persisting updated tokenInfo for accountId {{ accountId }} for clientId {{ clientId }}",
      "refreshingAccessToken": "Waiting for access token for accountId {{ accountId }}  for clientId {{ clientId }} to be fetched",
      "errors": {
        "missingRefreshToken": "The account {{ accountId }} has not been authenticated with Oauth2",
        "auth": "Error while retrieving new token: {{ token }}"
      }
    }
  },
  "utils": {
    "notify": {
      "errors": {
        "filePath": "Unable to notify file '{{ filePath }}'"
      }
    },
    "cms": {
      "modules": {
        "throwInvalidPathInput": "Expected Path Input"
      }
    },
    "detectPort": {
      "errors": {
        "invalidPort": "Port must be between {{ minPort }} and {{ maxPort }}"
      }
    },
    "PortManagerServer": {
      "started": "PortManagerServer running on port {{ port }}",
      "setPort": "Server with instanceId {{ instanceId }} assigned to port {{ port }}",
      "deletedPort": "Server with instanceId {{ instanceId }} unassigned from port {{ port }}",
      "close": "PortManagerServer shutting down.",
      "errors": {
        "portInUse": "Failed to start PortManagerServer. Port {{ port }} is already in use.",
        "duplicateInstance": "Failed to start PortManagerServer. An instance of PortManagerServer is already running.",
        "404": "Could not find a server with instanceId {{ instanceId }}",
        "409": "Failed to assign port. Server with instanceId {{ instanceId }} is already running on port {{ port }}",
        "400": "Invalid port requested. Port must be between {{ minPort }} and {{ maxPort }}."
      }
    }
  },
  "http": {
    "index": {
      "createGetRequestStream": {
        "onWrite": "Wrote file {{ filepath }}"
      },
      "errors": {
        "withOauth": "Oauth manager for account {{ accountId }} not found.",
        "withAuth": "Account with id {{ accountId }} not found.",
        "invalidAuthType": "Error authenticating HTTP request: account {{ accountId }} has an invalid auth type {{ authType }}"
      }
    }
  },
  "errors": {
    "fileSystemErrors": {
      "readAction": "reading from",
      "writeAction": "writing to",
      "otherAction": "accessing",
      "unknownFilepath": "a file or folder",
      "baseMessage": "An error occurred while {{ fileAction }} {{ filepath }}."
    },
    "apiErrors": {
      "messageDetail": "{{ requestName }} in account {{ accountId }}",
      "genericMessageDetail": "request",
      "unableToUpload": "Unable to upload \"{{ payload }}.",
      "codes": {
        "400": "The {{ messageDetail }} was bad.",
        "401": "The {{ messageDetail }} was unauthorized.",
        "403": "The {{ messageDetail }} was forbidden.",
        "404": "The {{ messageDetail }} was not found.",
        "429": "The {{ messageDetail }} surpassed the rate limit. Retry in one minute.",
        "503": "The {{ messageDetail }} could not be handled at this time. Please try again or visit https://help.hubspot.com/ to submit a ticket or contact HubSpot Support if the issue persists.",
        "500Generic": "The {{ messageDetail }} failed due to a server error. Please try again or visit https://help.hubspot.com/ to submit a ticket or contact HubSpot Support if the issue persists.",
        "400Generic": "The {{ messageDetail }} failed due to a client error.",
        "generic": "The {{ messageDetail }} failed."
      }
    }
  }
}
